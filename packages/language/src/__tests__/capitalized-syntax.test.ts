import parser, { defineForm } from "../";

describe("Used with Capitalized syntax", () => {
  it("should parse the form syntax correctly", () => {
    const result = parser.parse(`Formkl {
      Has {
        Text;
        "Another" Text;
      }
    }`);

    expect(result).toStrictEqual(
      defineForm({
        model: "base",
        sections: [
          {
            fields: [
              {
                type: "text",
                label: "Text",
                key: "text",
              },
              {
                type: "text",
                label: "Another",
                key: "another",
              },
            ],
          },
        ],
      }),
    );
  });

  it("should parse the form syntax correctly", () => {
    const result = parser.parse(`Formkl {
      Includes {
        Text;
        "Another" Text;
      }
    }`);

    expect(result).toStrictEqual(
      defineForm({
        model: "base",
        sections: [
          {
            fields: [
              {
                type: "text",
                label: "Text",
                key: "text",
              },
              {
                type: "text",
                label: "Another",
                key: "another",
              },
            ],
          },
        ],
      }),
    );
  });

  it("should show syntax error correctly", () => {
    expect(() => {
      parser.parse(`formkl "Your Formkl example" "This form is generated by the formkl adapter" {
				multiple "Work Experience" has {
					require text;
				}
				"Personal Information" as {
					text;
					multiple paragraph;
					multiple text as "something";
				}
			}`);
    }).toThrowError(/Unexpected token: "as" at 5:30, expected: "HAS"/);
  });
});
